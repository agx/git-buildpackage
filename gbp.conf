# Configuration file for "gbp <command>"

[DEFAULT]
# the default build command:
#builder = debuild -i -I
# the default clean command:
#cleaner = debuild clean
# the default branch for upstream sources:
#upstream-branch = upstream
# the default branch for the debian patch:
#debian-branch = master
# the default tag formats used:
#upstream-tag = upstream/%(version)s
#debian-tag = debian/%(version)s
#debian-tag-msg = %(pkg)s Debian release %(version)s
# use pristine-tar:
#pristine-tar = True
# don't check if debian-branch == current branch:
#ignore-branch = True
# Use color when on a terminal, alternatives: on/true, off/false or auto
#color = auto

# Options only affecting gbp buildpackage
[buildpackage]
# Look for a tag matching the upstream version when creating a tarball
#upstream-tree = tag
# uncomment this to automatically GPG sign tags:
#sign-tags = True
# keyid to GPG sign tags with:
#keyid = 0xdeadbeef
# push to a remote repository after a successful tag:
#posttag = git-push git.example.com
# call lintian after a successful build:
#postbuild = lintian $GBP_CHANGES_FILE
# let package generate upstream changelog before build:
#prebuild = GIT_DIR=$GBP_GIT_DIR debian/autogen.sh
# use this for more svn-buildpackage like behaviour:
#export-dir = ../build-area/
#tarball-dir = ../tarballs/
#ignore-new = True
#export = HEAD
# compress with bzip2
#compression = bzip2
# use best compression
#compression-level = best
# Don't send notifications, alternatives: on/true, off/false or auto
#notify = off
# Transparently handle submodules
# submodules = True
# Whether to use cowbuilder via git-pbuilder(1)
#pbuilder = True
# Which distribution to use with git-pbuilder
#dist = testing
# Options to pass to pbuilder when using git-pbuilder
#git-pbuilder-options = '--hookdir /etc/pbuilder/hooks'

# Options only affecting gbp import-orig
[import-orig]
# set a different upstream branch to import to:
#upstream-branch = newupstream
# set a different branch to merge to:
#debian-branch = dfsgclean
# don't merge to debian branch by default:
#merge = False
# import filter:
#filter = .svn
# filter out files from tarball passed to pristine tar:
#filter-pristine-tar = True
# run hook after the import:
#postimport = git-dch -N%(version)s -S -a --debian-branch=$GBP_BRANCH
# emulate old behaviour of calling dch:
#postimport = dch -v%(version)s New Upstream Version
# commit message:
#import-msg = New upstream version %(version)s

# Options only affecting gbp import-dsc
[import-dsc]
# set a different upstream branch:
#upstream-branch = svn-upstream
# import filter:
#filter = [ 'CVS', '.cvsignore' ]
#force committer to be the same as author
#author-is-committer = True
#same for the date
#author-date-is-committer-date = True

# Options only affecting gbp dch
[dch]
# options passed to git-log:
#git-log = --no-merges
# next snapshot number:
#snapshot-number = snapshot + 1
# include 7 digits of the commit id in the changelog enty:
#id-length = 7
# don't include information from meta tags:
#meta = False
# what tags to look for to generate bug-closing changelog entries:
#meta-closes = Closes|LP
# what regex should be used to parse the bug number
#meta-closes-bugnum = '(?:bug|issue)?\#?\s?\d+'
# include the full commit message in the changelog:
#full = True
# ignore Signed-off-by: lines:
#ignore-regex=(Signed-off|Acked)-by:
# use author name and email from git-config:
#git-author = True
# Customizatons can e.g. be used for line wrapping
#customizations=/usr/share/doc/git-buildpackage/examples/wrap_cl.py

# Options only affecting gbp pq
[pq]
#patch-numbers = False
# The format specifier for patch number prefixes
#patch-num-format = '%04d-'
# Whether to renumber patches when exporting patch queues
#renumber = False
# Whether to drop patch queue after export
#drop = False

# Options only affecting gbp clone
[clone]
#pristine-tar = True

# Options only affecting gbp pull
[pull]
#pristine-tar = True

# Options only affecting gbp create remote repo
[create-remote-repo]
# disable remote branch tracking
#track = False

# Sample config to create remote repositore using gbp create-remote-repo:
[remote-config pkg-libvirt]
# Location of the repository
remote-url-pattern = ssh://git.debian.org/git/pkg-libvirt/%(pkg)s
# Template dir to passed to git-init
template-dir = /srv/alioth.debian.org/chroot/home/groups/pkg-libvirt/git-template

